"""
Fail2ban integration for PISOWifi security
Automated threat response configuration
"""

import os
import logging
import subprocess
from pathlib import Path
from django.conf import settings
from .monitoring import security_monitor

logger = logging.getLogger('security')


class Fail2BanManager:
    """
    Manages fail2ban integration for automated threat response
    """
    
    def __init__(self):
        self.config_dir = getattr(settings, 'FAIL2BAN_CONFIG_DIR', '/etc/fail2ban')
        self.jail_local_path = os.path.join(self.config_dir, 'jail.local')
        self.filter_dir = os.path.join(self.config_dir, 'filter.d')
        self.action_dir = os.path.join(self.config_dir, 'action.d')
        
    def create_pisowifi_jail_config(self):
        """
        Create fail2ban jail configuration for PISOWifi
        """
        jail_config = """
# PISOWifi Security Jail Configuration
# Auto-generated by PISOWifi Security System

[DEFAULT]
# Ban hosts for 1 hour
bantime = 3600
# Allow 5 retries over 10 minutes
findtime = 600
maxretry = 5
# Use iptables for blocking
banaction = iptables-multiport
banaction_allports = iptables-allports

[pisowifi-auth]
enabled = true
port = http,https
filter = pisowifi-auth
logpath = {log_path}
maxretry = 3
bantime = 3600
findtime = 300

[pisowifi-admin]
enabled = true
port = http,https
filter = pisowifi-admin
logpath = {log_path}
maxretry = 2
bantime = 7200
findtime = 300

[pisowifi-scanner]
enabled = true
port = http,https
filter = pisowifi-scanner
logpath = {log_path}
maxretry = 1
bantime = 86400
findtime = 600

[pisowifi-injection]
enabled = true
port = http,https
filter = pisowifi-injection
logpath = {log_path}
maxretry = 1
bantime = 86400
findtime = 3600

[pisowifi-dos]
enabled = true
port = http,https
filter = pisowifi-dos
logpath = {log_path}
maxretry = 10
bantime = 1800
findtime = 60
""".format(log_path=getattr(settings, 'SECURITY_LOG_PATH', '/var/log/pisowifi/security.log'))
        
        return jail_config
    
    def create_auth_filter(self):
        """
        Create filter for authentication failures
        """
        filter_config = """
# PISOWifi Authentication Filter
[Definition]
failregex = ^.*SECURITY_EVENT: failed_login from <HOST> - .*$
            ^.*SECURITY_EVENT: brute_force_attack from <HOST> - .*$
            ^.*SECURITY_EVENT: multiple_failed_logins from <HOST> - .*$

ignoreregex =
"""
        return filter_config
    
    def create_admin_filter(self):
        """
        Create filter for admin access attempts
        """
        filter_config = """
# PISOWifi Admin Access Filter
[Definition]
failregex = ^.*SECURITY_EVENT: admin_login_failure from <HOST> - .*$
            ^.*SECURITY_EVENT: unauthorized_admin_access from <HOST> - .*$
            ^.*SECURITY_EVENT: admin_account_compromise from <HOST> - .*$

ignoreregex =
"""
        return filter_config
    
    def create_scanner_filter(self):
        """
        Create filter for security scanner detection
        """
        filter_config = """
# PISOWifi Scanner Detection Filter
[Definition]
failregex = ^.*SECURITY_EVENT: scanner_detected from <HOST> - .*$
            ^.*SECURITY_EVENT: vulnerability_scan from <HOST> - .*$
            ^.*SECURITY_EVENT: port_scan from <HOST> - .*$

ignoreregex =
"""
        return filter_config
    
    def create_injection_filter(self):
        """
        Create filter for injection attempts
        """
        filter_config = """
# PISOWifi Injection Attempts Filter
[Definition]
failregex = ^.*SECURITY_EVENT: sql_injection_attempt from <HOST> - .*$
            ^.*SECURITY_EVENT: xss_attempt from <HOST> - .*$
            ^.*SECURITY_EVENT: code_injection_attempt from <HOST> - .*$
            ^.*SECURITY_EVENT: command_injection from <HOST> - .*$

ignoreregex =
"""
        return filter_config
    
    def create_dos_filter(self):
        """
        Create filter for DoS attacks
        """
        filter_config = """
# PISOWifi DoS Protection Filter
[Definition]
failregex = ^.*SECURITY_EVENT: rate_limit_exceeded from <HOST> - .*$
            ^.*SECURITY_EVENT: dos_attack from <HOST> - .*$
            ^.*SECURITY_EVENT: excessive_requests from <HOST> - .*$

ignoreregex =
"""
        return filter_config
    
    def create_custom_action(self):
        """
        Create custom action to notify PISOWifi security system
        """
        action_config = """
# PISOWifi Custom Action
[Definition]
actionstart = 
actionstop = 
actioncheck = 
actionban = python3 {script_path} ban <ip>
actionunban = python3 {script_path} unban <ip>

[Init]
script_path = {script_path}
""".format(script_path=os.path.join(settings.BASE_DIR, 'app', 'security', 'fail2ban_notify.py'))
        
        return action_config
    
    def install_configuration(self):
        """
        Install fail2ban configuration files
        """
        try:
            # Create configuration directory structure if it doesn't exist
            os.makedirs(self.filter_dir, exist_ok=True)
            os.makedirs(self.action_dir, exist_ok=True)
            
            # Write jail configuration
            jail_config = self.create_pisowifi_jail_config()
            with open(self.jail_local_path, 'w') as f:
                f.write(jail_config)
            
            # Write filter configurations
            filters = {
                'pisowifi-auth.conf': self.create_auth_filter(),
                'pisowifi-admin.conf': self.create_admin_filter(),
                'pisowifi-scanner.conf': self.create_scanner_filter(),
                'pisowifi-injection.conf': self.create_injection_filter(),
                'pisowifi-dos.conf': self.create_dos_filter(),
            }
            
            for filename, content in filters.items():
                filter_path = os.path.join(self.filter_dir, filename)
                with open(filter_path, 'w') as f:
                    f.write(content)
            
            # Write custom action
            action_path = os.path.join(self.action_dir, 'pisowifi-notify.conf')
            with open(action_path, 'w') as f:
                f.write(self.create_custom_action())
            
            logger.info("Fail2ban configuration installed successfully")
            
            # Try to restart fail2ban service
            self.restart_fail2ban()
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to install fail2ban configuration: {e}")
            return False
    
    def restart_fail2ban(self):
        """
        Restart fail2ban service
        """
        try:
            # Try systemctl first (most common)
            result = subprocess.run(['systemctl', 'restart', 'fail2ban'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("Fail2ban service restarted successfully")
                return True
            
            # Try service command as fallback
            result = subprocess.run(['service', 'fail2ban', 'restart'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("Fail2ban service restarted successfully (via service)")
                return True
            
            logger.warning("Could not restart fail2ban service automatically")
            return False
            
        except Exception as e:
            logger.error(f"Error restarting fail2ban: {e}")
            return False
    
    def get_banned_ips(self):
        """
        Get list of currently banned IPs from fail2ban
        """
        banned_ips = []
        
        try:
            # Get list of jails
            result = subprocess.run(['fail2ban-client', 'status'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                # Parse jail names from output
                jails = []
                for line in result.stdout.split('\n'):
                    if 'Jail list:' in line:
                        jail_line = line.split('Jail list:')[1].strip()
                        jails = [j.strip() for j in jail_line.split(',') if j.strip()]
                        break
                
                # Get banned IPs from each jail
                for jail in jails:
                    if jail.startswith('pisowifi-'):
                        jail_result = subprocess.run(['fail2ban-client', 'status', jail], 
                                                   capture_output=True, text=True)
                        
                        if jail_result.returncode == 0:
                            for line in jail_result.stdout.split('\n'):
                                if 'Banned IP list:' in line:
                                    ip_line = line.split('Banned IP list:')[1].strip()
                                    if ip_line:
                                        jail_ips = [ip.strip() for ip in ip_line.split() if ip.strip()]
                                        banned_ips.extend(jail_ips)
            
        except Exception as e:
            logger.error(f"Error getting banned IPs from fail2ban: {e}")
        
        return list(set(banned_ips))  # Remove duplicates
    
    def unban_ip(self, ip_address):
        """
        Manually unban an IP address from all jails
        """
        try:
            # Get list of jails
            result = subprocess.run(['fail2ban-client', 'status'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                jails = []
                for line in result.stdout.split('\n'):
                    if 'Jail list:' in line:
                        jail_line = line.split('Jail list:')[1].strip()
                        jails = [j.strip() for j in jail_line.split(',') if j.strip()]
                        break
                
                # Unban from each PISOWifi jail
                success = True
                for jail in jails:
                    if jail.startswith('pisowifi-'):
                        unban_result = subprocess.run(['fail2ban-client', 'set', jail, 'unbanip', ip_address], 
                                                    capture_output=True, text=True)
                        if unban_result.returncode != 0:
                            success = False
                
                if success:
                    logger.info(f"Successfully unbanned {ip_address} from fail2ban")
                    
                    # Log to security monitor
                    security_monitor.log_security_event(
                        'fail2ban_manual_unban',
                        ip_address,
                        {'unbanned_by': 'admin_manual', 'method': 'fail2ban'}
                    )
                    
                return success
                
        except Exception as e:
            logger.error(f"Error unbanning {ip_address} from fail2ban: {e}")
            return False
    
    def get_jail_status(self):
        """
        Get status of all PISOWifi jails
        """
        jail_status = {}
        
        try:
            result = subprocess.run(['fail2ban-client', 'status'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                jails = []
                for line in result.stdout.split('\n'):
                    if 'Jail list:' in line:
                        jail_line = line.split('Jail list:')[1].strip()
                        jails = [j.strip() for j in jail_line.split(',') if j.strip()]
                        break
                
                for jail in jails:
                    if jail.startswith('pisowifi-'):
                        jail_result = subprocess.run(['fail2ban-client', 'status', jail], 
                                                   capture_output=True, text=True)
                        
                        if jail_result.returncode == 0:
                            status_info = {
                                'enabled': True,
                                'currently_failed': 0,
                                'total_failed': 0,
                                'currently_banned': 0,
                                'total_banned': 0,
                                'banned_ips': []
                            }
                            
                            for line in jail_result.stdout.split('\n'):
                                line = line.strip()
                                if 'Currently failed:' in line:
                                    status_info['currently_failed'] = int(line.split(':')[1].strip())
                                elif 'Total failed:' in line:
                                    status_info['total_failed'] = int(line.split(':')[1].strip())
                                elif 'Currently banned:' in line:
                                    status_info['currently_banned'] = int(line.split(':')[1].strip())
                                elif 'Total banned:' in line:
                                    status_info['total_banned'] = int(line.split(':')[1].strip())
                                elif 'Banned IP list:' in line:
                                    ip_line = line.split('Banned IP list:')[1].strip()
                                    if ip_line:
                                        status_info['banned_ips'] = [ip.strip() for ip in ip_line.split() if ip.strip()]
                            
                            jail_status[jail] = status_info
            
        except Exception as e:
            logger.error(f"Error getting jail status: {e}")
        
        return jail_status


# Global fail2ban manager instance
fail2ban_manager = Fail2BanManager()