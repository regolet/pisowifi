# Generated by Django 5.1.5 on 2025-07-30 19:43

from django.db import migrations
import subprocess
import os


def get_system_version():
    """Get current system version from git tags"""
    try:
        # Get the latest git tag
        result = subprocess.run(
            ['git', 'describe', '--tags', '--abbrev=0'],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            # Remove 'v' prefix if present
            if version.startswith('v'):
                version = version[1:]
            return version
    except Exception:
        pass
    
    # Fallback: try to get from git describe
    try:
        result = subprocess.run(
            ['git', 'describe', '--tags', '--always'],
            capture_output=True,
            text=True,
            cwd=os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        )
        if result.returncode == 0:
            version = result.stdout.strip()
            # Remove 'v' prefix and commit info if present
            if version.startswith('v'):
                version = version[1:]
            if '-' in version:
                version = version.split('-')[0]
            return version
    except Exception:
        pass
    
    # Final fallback
    return '2.0.1'


def update_version_forward(apps, schema_editor):
    """Update current version to actual system version"""
    UpdateSettings = apps.get_model('app', 'UpdateSettings')
    
    # Get or create the UpdateSettings instance
    try:
        settings, created = UpdateSettings.objects.get_or_create(pk=1)
        
        # Update version if it's still the old default or if this is a new instance
        if created or settings.Current_Version == '1.0.0':
            detected_version = get_system_version()
            settings.Current_Version = detected_version
            settings.save()
            print(f"Updated current version to: {detected_version}")
        else:
            print(f"Current version already set to: {settings.Current_Version}")
            
    except Exception as e:
        print(f"Error updating version: {e}")


def update_version_reverse(apps, schema_editor):
    """Reverse: set version back to 1.0.0"""
    UpdateSettings = apps.get_model('app', 'UpdateSettings')
    
    try:
        settings = UpdateSettings.objects.get(pk=1)
        settings.Current_Version = '1.0.0'
        settings.save()
        print("Reverted current version to: 1.0.0")
    except UpdateSettings.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0123_blockeddevices_is_permanent_and_more'),
    ]

    operations = [
        migrations.RunPython(update_version_forward, update_version_reverse),
    ]
